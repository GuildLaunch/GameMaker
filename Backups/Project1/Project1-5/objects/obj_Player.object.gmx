<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar rateOfFire;
globalvar rateOfFireInit;
globalvar noShots;
rateOfFire = 10;
noShots = 0;
spd=10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>horizontal_value = gamepad_axis_value(0,gp_axislh);
scaled_horizontal_value = round(spd*horizontal_value);

vertical_value = gamepad_axis_value(0,gp_axislv);
scaled_vertical_value = round(spd*vertical_value);



///show_debug_message(scaled_vertical_value);

draw_text(50, 0, gamepad_axis_value(0,gp_axislh));

if (horizontal_value &gt; 0.2 || vertical_value &gt; 0.2 || horizontal_value &lt; -0.2 || vertical_value &lt; -0.2)
{
    if place_free(x+scaled_horizontal_value,y) &amp;&amp; place_free(x,y+scaled_vertical_value){
            x+=scaled_horizontal_value;
            y+=scaled_vertical_value;
    }else if place_free(x+1,y) || place_free(x,y+1){
         while(!place_free(x+scaled_horizontal_value,y) &amp;&amp; scaled_horizontal_value != 0){
            if (scaled_horizontal_value &gt; 0)
            {
                scaled_horizontal_value-=1;
            }else{
                scaled_horizontal_value+=1;
            }
         }
         while(!place_free(x,y+scaled_vertical_value) &amp;&amp; scaled_vertical_value != 0){
            if (scaled_vertical_value &gt; 0)
            {
                scaled_vertical_value-=1;
            }else{
                scaled_vertical_value+=1;
            }
         }
         x+=floor(scaled_horizontal_value);
         y+=floor(scaled_vertical_value);
    }
}

if (noShots &lt; rateOfFire)
{
noShots+=1;
}
else
{
noShots = 0;
instance_create(x+10,y+16,spr_laser);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
